<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Sandarenu&#39;s Blog</title>
    <link>http://sandarenu.github.io/tags/programming/</link>
    <description>Recent content in Programming on Sandarenu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Tue, 22 Mar 2016 21:53:17 +0530</lastBuildDate>
    <atom:link href="http://sandarenu.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started with React Native</title>
      <link>http://sandarenu.github.io/post/getting-started-with-react-native/</link>
      <pubDate>Tue, 22 Mar 2016 21:53:17 +0530</pubDate>
      
      <guid>http://sandarenu.github.io/post/getting-started-with-react-native/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/react-native/&#34;&gt;React Native&lt;/a&gt; is a framework that allows us to create Native Android and iOS applications using JavaScripts by Facebook. It is a extention of &lt;a href=&#34;http://facebook.github.io/react/&#34;&gt;React JavaScript framework&lt;/a&gt; available for Web application development. With React-Native we can create native android or iOS applications without knowing much about native application development. It opens up the native application development to web developers who knows JavaScript and CSS.&lt;/p&gt;

&lt;p&gt;Main advantage of React-Native becomes very clear when we won&amp;rsquo;t to develop an application which requires a normal Web interface and native Android and iOS applications. By using React and React-Native we can reuse most of the code between three variations of our application. Previously we would have to maintain three separate code bases, but by using React we can use single code base and create all three types of applications; web, android and iOS.&lt;/p&gt;

&lt;p&gt;When I was first started using React-Native, I had zero experiance with Android application development. But I was able to start developing andorid application without having much knowledge on android native applictions. React Native site has &lt;a href=&#34;https://facebook.github.io/react-native/docs/android-setup.html&#34;&gt;good guide&lt;/a&gt; on how to get start android application development. But when I started setting up my Ubuntu machine, I faced few deficulties. So I&amp;rsquo;m doing this post on how to overcome those issues and to the setup smoothly.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Follow the instructions given in the react guide to setup android SDK if you have not installed it yet. After installing SDK you&amp;rsquo;ll have to include that to your &lt;code&gt;$PATH&lt;/code&gt;. Update you &lt;code&gt;~/.profile&lt;/code&gt; with following.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;export ANDROID_HOME=/home/sandarenu/software/android-sdk-linux
export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;a href=&#34;https://www.genymotion.com/&#34;&gt;Genemotion Andoid Emulator&lt;/a&gt;. It has a free for personal usage package. It has some limitaions than the paid verions, but features available in free version is enough for us. After installing Genemotion, . Create soft link to  &lt;code&gt;genymotion&lt;/code&gt; executable to &lt;code&gt;/usr/bin&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -s /home/sandarenu/software/genymotion/genymotion /usr/bin/genymotion
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;To use genemotions we need Oracle Virtual Box as well. If you don&amp;rsquo;t have it installed &lt;a href=&#34;https://www.virtualbox.org/wiki/Linux_Downloads&#34;&gt;install it&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you are using 64-bit Ubuntu, like I&amp;rsquo;m (does anybody uses 32-bit anymore?&amp;hellip;), then you have to install an additional dependency to use android SDK. Otherwise it throws following error when builing the application.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;java.io.IOException: Cannot run program &amp;quot;/home/sandarenu/software/android-sdk-linux/build-tools/23.0.1/aapt&amp;quot;: error=2, No such file or directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix that I have to install following library.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install lib32stdc++6 lib32z1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refer &lt;a href=&#34;http://stackoverflow.com/questions/18928164/android-studio-cannot-find-aapt/18930424#18930424&#34;&gt;stackoverflow discussion&lt;/a&gt; for more information on this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Then install NodeJS if you have not installed it yet. React Native &lt;a href=&#34;https://facebook.github.io/react-native/docs/getting-started-linux.html&#34;&gt;site has the instructions on this&lt;/a&gt;. I already had an old version of Node installed in my matchin. I had to update it to the latest version. To do that I used following.&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;sudo npm cache clean -f
sudo npm install -g n
sudo n stable
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also had to update my simlink.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo ln -sf /usr/local/n/versions/node/&amp;lt;VERSION&amp;gt;/bin/node /usr/bin/node 
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;We also have to install &lt;code&gt;watchman&lt;/code&gt; tool by facebook as well. Instuction on how to do that is also in the above guide.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Then install React Native&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt; sudo npm install -g react-native-cli
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now your setup is ready. We can create our first react native android application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; react-native init HelloReactNative
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go inside &lt;code&gt;HelloReactNative&lt;/code&gt; folder. Running react native andoid application is a two step process. First we have to build the native application and then we have to start the react native development sever. Actually there is another step, you have to start your emulator first.&lt;/p&gt;

&lt;p&gt;To build android appication use following commands, after you fire up your emulator.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; npm install
 react-native run-android
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Build will take few minutes. First time build will take more time since npm and gradle have to download its dependencies. While native build is running we can start react native dev server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;react-native start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything goes well you should be able to see your first android application powered by react-native in your emulator.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Guava Lists.transform()</title>
      <link>http://sandarenu.github.io/post/understanding-guava-lists-transform/</link>
      <pubDate>Fri, 22 Jan 2016 16:11:49 +0530</pubDate>
      
      <guid>http://sandarenu.github.io/post/understanding-guava-lists-transform/</guid>
      <description>&lt;p&gt;Guava is a wonderful library by Google. Before Java 8 Guava was one of the best ways to use functional programming in Java.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve being using Guava in one of my projects and came accross an strance issue reasontly. I had a list of items and I wanted to convert them to different object and filter some of those items.&lt;/p&gt;

&lt;p&gt;After filtering I was changing some values in the list items. But what was strange was thay when I printed the list back it was not showing the changed value. It was still showing the original value. Code would look something similar to below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import com.google.common.base.Function;
import com.google.common.collect.Lists;

import java.util.List;

public class LineItemHolderGuava {
    private List&amp;lt;ProcessedItem&amp;gt; mainItems;
    private List&amp;lt;ProcessedItem&amp;gt; optionalItems;

    public LineItemHolderGuava(List&amp;lt;LineItem&amp;gt; main, List&amp;lt;LineItem&amp;gt; optional){
        Function&amp;lt;LineItem, ProcessedItem&amp;gt; toSummaryItem = new Function&amp;lt;LineItem, ProcessedItem&amp;gt;() {
            @Override
            public ProcessedItem apply(LineItem lineItem) {
                System.out.println(&amp;quot;Function called with : &amp;quot; + lineItem);
                return new ProcessedItem(lineItem);
            }
        };

        this.optionalItems = Lists.transform(optional, toSummaryItem);
        this.mainItems = Lists.transform(main, toSummaryItem);
    }

    public List&amp;lt;ProcessedItem&amp;gt; getMainItems() {
        return mainItems;
    }

    public List&amp;lt;ProcessedItem&amp;gt; getOptionalItems() {
        return optionalItems;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder(&amp;quot;LineItemHolder{&amp;quot;);
        sb.append(&amp;quot;mainItems=&amp;quot;).append(mainItems);
        sb.append(&amp;quot;, optionalItems=&amp;quot;).append(optionalItems);
        sb.append(&#39;}&#39;);
        return sb.toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have created a simple main method to test this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public static void main(String [] args){
        Money m1 = new Money(&amp;quot;LKR&amp;quot;, &amp;quot;10&amp;quot;);
        Money m2 = new Money(&amp;quot;LKR&amp;quot;, &amp;quot;20&amp;quot;);
        Money m3 = new Money(&amp;quot;LKR&amp;quot;, &amp;quot;30&amp;quot;);
        Money m4 = new Money(&amp;quot;LKR&amp;quot;, &amp;quot;40&amp;quot;);

        LineItem l1 = new LineItem(m1, LineItem.OperationType.CREDIT, &amp;quot;L1&amp;quot;);
        LineItem l2 = new LineItem(m2, LineItem.OperationType.DEBIT, &amp;quot;L2&amp;quot;);
        LineItem l3 = new LineItem(m2, LineItem.OperationType.CREDIT, &amp;quot;L3&amp;quot;);
        LineItem l4 = new LineItem(m2, LineItem.OperationType.DEBIT, &amp;quot;L5&amp;quot;);

        List&amp;lt;LineItem&amp;gt; list1 = new ArrayList&amp;lt;LineItem&amp;gt;();
        list1.add(l1);
        list1.add(l2);

        List&amp;lt;LineItem&amp;gt; list2 = new ArrayList&amp;lt;LineItem&amp;gt;();
        list2.add(l3);
        list2.add(l4);

        LineItemHolderGuava guavaHolder = new LineItemHolderGuava(list1, list2);
        System.out.println(&amp;quot;G 1: &amp;quot; + guavaHolder);

        guavaHolder.getMainItems().get(0).setAmount(new Money(&amp;quot;USD&amp;quot;, &amp;quot;50&amp;quot;));
        System.out.println(&amp;quot;G 2: &amp;quot; + guavaHolder);

        guavaHolder.getMainItems().get(0).getAmount().setCurrencyCode(&amp;quot;KES&amp;quot;);
        System.out.println(&amp;quot;G 3: &amp;quot; + guavaHolder);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What do you expect as the output?. I expected to see the second log printed with &lt;code&gt;USD&lt;/code&gt;and third log printed with &lt;code&gt;KES&lt;/code&gt;, but I was wrong. I got following output.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;G 1: LineItemHolder{mainItems=[ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=10}, description=&#39;L1&#39;}, ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L2&#39;}], optionalItems=[ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L3&#39;}, ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L5&#39;}]}

G 2: LineItemHolder{mainItems=[ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=10}, description=&#39;L1&#39;}, ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L2&#39;}], optionalItems=[ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L3&#39;}, ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L5&#39;}]}

G 3: LineItemHolder{mainItems=[ProcessedItem{amount=Money{currencyCode=&#39;KES&#39;, amount=10}, description=&#39;L1&#39;}, ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L2&#39;}], optionalItems=[ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L3&#39;}, ProcessedItem{amount=Money{currencyCode=&#39;LKR&#39;, amount=20}, description=&#39;L5&#39;}]}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Strangly second log got printed with &lt;code&gt;LKR&lt;/code&gt; and third log got printed with &lt;code&gt;KES&lt;/code&gt;. This was driving me nuts. I put logs everywere, and debugged the code and I couldn&amp;rsquo;t find any reason for this. Setter was called properly and I was unable to find a proper reason for this. I ended up rewriting this using Java8 stream API finally.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;import java.util.List;
import java.util.stream.Collectors;

public class LineItemHolderJ8 {
    private List&amp;lt;ProcessedItem&amp;gt; mainItems;
    private List&amp;lt;ProcessedItem&amp;gt; optionalItems;

    public LineItemHolderJ8(List&amp;lt;LineItem&amp;gt; main, List&amp;lt;LineItem&amp;gt; optional) {
        this.optionalItems = main.stream().map(l -&amp;gt; new ProcessedItem(l)).collect(Collectors.toList());
        this.mainItems = main.stream().map(l -&amp;gt; new ProcessedItem(l)).collect(Collectors.toList());
    }

    public List&amp;lt;ProcessedItem&amp;gt; getMainItems() {
        return mainItems;
    }

    public List&amp;lt;ProcessedItem&amp;gt; getOptionalItems() {
        return optionalItems;
    }

    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder(&amp;quot;LineItemHolder{&amp;quot;);
        sb.append(&amp;quot;mainItems=&amp;quot;).append(mainItems);
        sb.append(&amp;quot;, optionalItems=&amp;quot;).append(optionalItems);
        sb.append(&#39;}&#39;);
        return sb.toString();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the day I was thinking about this and suddenly I got a feeling that this might be some special thing related to Guava. To my surprise it turn out to be how Guava &lt;code&gt;Lists.transform&lt;/code&gt; works. When I called &lt;code&gt;this.mainItems = Lists.transform(main, toSummaryItem);&lt;/code&gt;, I expected that it will transform the list in to new types and store the converted list in &lt;code&gt;this.mainItems&lt;/code&gt;. But I was wrong. Guava &lt;code&gt;Lists.transform&lt;/code&gt; do not transform the object completely at the first time. What is does is when someone access the list, on the fly it transforms and return the objects.
So each time I call &lt;code&gt;toString&lt;/code&gt; on the list, Guava will be taking the original list and convert them to the new object types using the function I&amp;rsquo;ve given and return that to me. That why setting &lt;code&gt;guavaHolder.getMainItems().get(0).setAmount(new Money(&amp;quot;USD&amp;quot;, &amp;quot;50&amp;quot;));&lt;/code&gt; didnt work. Even though we set new &lt;code&gt;Money&lt;/code&gt; object, when we call the &lt;code&gt;toString&lt;/code&gt; method to print the list, guava will be creating a completely new list using the original list.
In the second time we directly changed the currency code &lt;code&gt;guavaHolder.getMainItems().get(0).getAmount().setCurrencyCode(&amp;quot;KES&amp;quot;);&lt;/code&gt;. Here we are actually changing the Money object refered by both the original list and converted list.
This functionaly was explained properly in the &lt;a href=&#34;http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Lists.html#transform%28java.util.List,%20com.google.common.base.Function%29&#34;&gt;Guava docs&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Returns a list that applies function to each element of fromList. The returned list is a transformed view of fromList; changes to fromList will be reflected in the returned list and vice versa.&lt;/p&gt;

&lt;p&gt;Since functions are not reversible, the transform is one-way and new items cannot be stored in the returned list. The add, addAll and set methods are unsupported in the returned list.&lt;/p&gt;

&lt;p&gt;The function is applied lazily, invoked when needed. This is necessary for the returned list to be a view, but it means that the function will be applied many times for bulk operations like List.contains(java.lang.Object) and List.hashCode(). For this to perform well, function should be fast. To avoid lazy evaluation when the returned list doesn&amp;rsquo;t need to be a view, copy the returned list into a new list of your choosing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It was my fault that I didn&amp;rsquo;t read the docs properly. I ended up wasting around half a day to fixing a strange bug in one of my code due to this. So next time when you use &lt;code&gt;Lists.tranform&lt;/code&gt; better remember this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Super Charge Your Shell with ZSH</title>
      <link>http://sandarenu.github.io/post/super_charge_your_shell_will_zsh/</link>
      <pubDate>Sat, 08 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sandarenu.github.io/post/super_charge_your_shell_will_zsh/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve being using Linux as my primary OS for about 6 years.
Since I&amp;rsquo;m doing programming all the time, I use shell all the time to perform various task from compiling to commiting code. First I used the normal Terminal comes with Ubuntu
and then for about three years I&amp;rsquo;ve being using Terminator. Terminator is better than normal terminal since it has split screen feature. But no matter what the frontend, underneath
It is still the BASH.&lt;/p&gt;

&lt;p&gt;Resently I came accross a new Shell, ZSH !. Well it is not a new thing, but I haven&amp;rsquo;t came accorss it before. I&amp;rsquo;ve to say that ZSH is far better than BASH. It has some really cool features. There is a very nice project called &lt;a href=&#34;https://github.com/robbyrussell/oh-my-zsh&#34;&gt;oh my zsh&lt;/a&gt; which is a community driven framework to manage zsh configurations. You can use &lt;code&gt;oh-my-zsh&lt;/code&gt; to install ZSH as well.&lt;/p&gt;

&lt;p&gt;To installing ZSH just execute following command.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -L http://install.ohmyz.sh | sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will download and setup zsh as well as scripts related to oh-my-zsh. Above itself tryies to change your default shell to zsh as well, but in my machine that part failed. In case if that happens use following to set it mannually.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chsh -s /bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So what makes ZSH better than BASH?, well there are many reason. I&amp;rsquo;ve listed some of them below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Powerful context based tab completion&lt;/li&gt;
&lt;li&gt;Pattern matching/globbing on alien steroids&lt;/li&gt;
&lt;li&gt;Themeable prompts&lt;/li&gt;
&lt;li&gt;Loadable modules&lt;/li&gt;
&lt;li&gt;Good spelling correction&lt;/li&gt;
&lt;li&gt;Sharing of command history among all running shells (sometimes this can be annoying as well)&lt;/li&gt;
&lt;li&gt;Global aliases&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I really like the GIT integration; I can see the current branch I&amp;rsquo;m working on and wether it is dirty or not directly from the terminal.
 &lt;img src=&#34;http://sandarenu.github.io/images/zsh-git.png&#34; alt=&#34;Terminal inside a GIT repo&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy way to Mock REST services</title>
      <link>http://sandarenu.github.io/post/easy_way_to_mock_rest_services/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sandarenu.github.io/post/easy_way_to_mock_rest_services/</guid>
      <description>&lt;p&gt;These days we are working more and more with REST web services. Most of the times we are writing clients to access 3rd party sevices hosted in a remote server or even local services. Sometimes in large teams one group is developing the server and other group is writing the clients to use them. In such situations client team might need to test their clients without the availablity of the real service. They only have the API definition.&lt;/p&gt;

&lt;p&gt;In last few months I came accross such situations multiple times. So I wanted to find out a fast and easy way to simulate(mock) a REST service. That is when I found out about the &lt;a href=&#34;http://wiremock.org/&#34;&gt;WireMocks&lt;/a&gt; capability to create simple REST simulators very easily. I &lt;a href=&#34;http://sandarenu.blogspot.com/2012/12/stubbing-asynchronous-http-services.html&#34;&gt;knew about WireMock before&lt;/a&gt; and had used it in intergration testing. But on those times I had used them with JUnit.&lt;/p&gt;

&lt;p&gt;Same Wiremock can be used to create simulators very easily. We can define request/response formats in a JSON file and use Wiremock to serve them. I have created a sample simulator  in &lt;a href=&#34;https://github.com/sandarenu/rest-sim&#34;&gt;Github&lt;/a&gt;. Have a look and see how easy it is to create a simulator&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caution with Java Autoboxing</title>
      <link>http://sandarenu.github.io/post/caution_with_java_autoboxing/</link>
      <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sandarenu.github.io/post/caution_with_java_autoboxing/</guid>
      <description>&lt;p&gt;In Java &lt;strong&gt;Boxing&lt;/strong&gt; means when you convert a primitive type to a reference type. So when you have some thing like&lt;/p&gt;

&lt;pre&gt;
boolean myBool = new Boolean(&#34;true&#34;);
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Boolean&lt;/code&gt; object is converted to primitive type &lt;code&gt;boolean&lt;/code&gt;. So how this happens under the hood? Java compiler uses the
method &lt;code&gt;booleanValue()&lt;/code&gt; in &lt;code&gt;Boolean&lt;/code&gt; class to get the primitive value. This is where you have to be careful; there is a possibility
of NPE when the &lt;code&gt;Boolean&lt;/code&gt; object is null.&lt;/p&gt;

&lt;p&gt;Recently I had a NPE due to this. I was creating a POJO from mongo &lt;code&gt;DBObject&lt;/code&gt;. POJO had a boolean value and I was setting
its value using a setter.&lt;/p&gt;

&lt;pre&gt;
public void setExpirableApp(boolean expirableApp) {
        this.expirableApp = expirableApp;
}
&lt;/pre&gt;

&lt;p&gt;I was calling the setter as follows.&lt;/p&gt;

&lt;pre&gt;
app.setExpirableApp((Boolean) dbObject.get(&#34;expirable-app&#34;))
&lt;/pre&gt;

&lt;p&gt;This is where I encounter NPE. At first glance everything looked fine. Problem happened when there is no field for &lt;code&gt;&amp;quot;expirable-app&amp;quot;&lt;/code&gt;
in the DB. In that case &lt;code&gt;(Boolean) dbObject.get(&amp;quot;expirable-app&amp;quot;)&lt;/code&gt; would return &lt;code&gt;null&lt;/code&gt;. In the setter this is tried to convert to
&lt;code&gt;boolean&lt;/code&gt; which throws NPE due to above explained auto-boxing. So need to be careful when handling scenarios like this.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>