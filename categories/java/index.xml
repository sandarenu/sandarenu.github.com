<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Sandarenu&#39;s Blog</title>
    <link>http://sandarenu.github.io/categories/java/</link>
    <description>Recent content in Java on Sandarenu&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>All rights reserved - 2016</copyright>
    <lastBuildDate>Sat, 02 Aug 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sandarenu.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Easy way to Mock REST services</title>
      <link>http://sandarenu.github.io/post/easy_way_to_mock_rest_services/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sandarenu.github.io/post/easy_way_to_mock_rest_services/</guid>
      <description>&lt;p&gt;These days we are working more and more with REST web services. Most of the times we are writing clients to access 3rd party sevices hosted in a remote server or even local services. Sometimes in large teams one group is developing the server and other group is writing the clients to use them. In such situations client team might need to test their clients without the availablity of the real service. They only have the API definition.&lt;/p&gt;

&lt;p&gt;In last few months I came accross such situations multiple times. So I wanted to find out a fast and easy way to simulate(mock) a REST service. That is when I found out about the &lt;a href=&#34;http://wiremock.org/&#34;&gt;WireMocks&lt;/a&gt; capability to create simple REST simulators very easily. I &lt;a href=&#34;http://sandarenu.blogspot.com/2012/12/stubbing-asynchronous-http-services.html&#34;&gt;knew about WireMock before&lt;/a&gt; and had used it in intergration testing. But on those times I had used them with JUnit.&lt;/p&gt;

&lt;p&gt;Same Wiremock can be used to create simulators very easily. We can define request/response formats in a JSON file and use Wiremock to serve them. I have created a sample simulator  in &lt;a href=&#34;https://github.com/sandarenu/rest-sim&#34;&gt;Github&lt;/a&gt;. Have a look and see how easy it is to create a simulator&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Easy way to Mock REST services</title>
      <link>http://sandarenu.github.io/posts/easy_way_to_mock_rest_services/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sandarenu.github.io/posts/easy_way_to_mock_rest_services/</guid>
      <description>&lt;p&gt;These days we are working more and more with REST web services. Most of the times we are writing clients to access 3rd party sevices hosted in a remote server or even local services. Sometimes in large teams one group is developing the server and other group is writing the clients to use them. In such situations client team might need to test their clients without the availablity of the real service. They only have the API definition.&lt;/p&gt;

&lt;p&gt;In last few months I came accross such situations multiple times. So I wanted to find out a fast and easy way to simulate(mock) a REST service. That is when I found out about the &lt;a href=&#34;http://wiremock.org/&#34;&gt;WireMocks&lt;/a&gt; capability to create simple REST simulators very easily. I &lt;a href=&#34;http://sandarenu.blogspot.com/2012/12/stubbing-asynchronous-http-services.html&#34;&gt;knew about WireMock before&lt;/a&gt; and had used it in intergration testing. But on those times I had used them with JUnit.&lt;/p&gt;

&lt;p&gt;Same Wiremock can be used to create simulators very easily. We can define request/response formats in a JSON file and use Wiremock to serve them. I have created a sample simulator  in &lt;a href=&#34;https://github.com/sandarenu/rest-sim&#34;&gt;Github&lt;/a&gt;. Have a look and see how easy it is to create a simulator&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caution with Java Autoboxing</title>
      <link>http://sandarenu.github.io/post/caution_with_java_autoboxing/</link>
      <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sandarenu.github.io/post/caution_with_java_autoboxing/</guid>
      <description>&lt;p&gt;In Java &lt;strong&gt;Boxing&lt;/strong&gt; means when you convert a primitive type to a reference type. So when you have some thing like&lt;/p&gt;

&lt;pre&gt;
boolean myBool = new Boolean(&#34;true&#34;);
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Boolean&lt;/code&gt; object is converted to primitive type &lt;code&gt;boolean&lt;/code&gt;. So how this happens under the hood? Java compiler uses the
method &lt;code&gt;booleanValue()&lt;/code&gt; in &lt;code&gt;Boolean&lt;/code&gt; class to get the primitive value. This is where you have to be careful; there is a possibility
of NPE when the &lt;code&gt;Boolean&lt;/code&gt; object is null.&lt;/p&gt;

&lt;p&gt;Recently I had a NPE due to this. I was creating a POJO from mongo &lt;code&gt;DBObject&lt;/code&gt;. POJO had a boolean value and I was setting
its value using a setter.&lt;/p&gt;

&lt;pre&gt;
public void setExpirableApp(boolean expirableApp) {
        this.expirableApp = expirableApp;
}
&lt;/pre&gt;

&lt;p&gt;I was calling the setter as follows.&lt;/p&gt;

&lt;pre&gt;
app.setExpirableApp((Boolean) dbObject.get(&#34;expirable-app&#34;))
&lt;/pre&gt;

&lt;p&gt;This is where I encounter NPE. At first glance everything looked fine. Problem happened when there is no field for &lt;code&gt;&amp;quot;expirable-app&amp;quot;&lt;/code&gt;
in the DB. In that case &lt;code&gt;(Boolean) dbObject.get(&amp;quot;expirable-app&amp;quot;)&lt;/code&gt; would return &lt;code&gt;null&lt;/code&gt;. In the setter this is tried to convert to
&lt;code&gt;boolean&lt;/code&gt; which throws NPE due to above explained auto-boxing. So need to be careful when handling scenarios like this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Caution with Java Autoboxing</title>
      <link>http://sandarenu.github.io/posts/caution_with_java_autoboxing/</link>
      <pubDate>Thu, 05 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sandarenu.github.io/posts/caution_with_java_autoboxing/</guid>
      <description>&lt;p&gt;In Java &lt;strong&gt;Boxing&lt;/strong&gt; means when you convert a primitive type to a reference type. So when you have some thing like&lt;/p&gt;

&lt;pre&gt;
boolean myBool = new Boolean(&#34;true&#34;);
&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Boolean&lt;/code&gt; object is converted to primitive type &lt;code&gt;boolean&lt;/code&gt;. So how this happens under the hood? Java compiler uses the
method &lt;code&gt;booleanValue()&lt;/code&gt; in &lt;code&gt;Boolean&lt;/code&gt; class to get the primitive value. This is where you have to be careful; there is a possibility
of NPE when the &lt;code&gt;Boolean&lt;/code&gt; object is null.&lt;/p&gt;

&lt;p&gt;Recently I had a NPE due to this. I was creating a POJO from mongo &lt;code&gt;DBObject&lt;/code&gt;. POJO had a boolean value and I was setting
its value using a setter.&lt;/p&gt;

&lt;pre&gt;
public void setExpirableApp(boolean expirableApp) {
        this.expirableApp = expirableApp;
}
&lt;/pre&gt;

&lt;p&gt;I was calling the setter as follows.&lt;/p&gt;

&lt;pre&gt;
app.setExpirableApp((Boolean) dbObject.get(&#34;expirable-app&#34;))
&lt;/pre&gt;

&lt;p&gt;This is where I encounter NPE. At first glance everything looked fine. Problem happened when there is no field for &lt;code&gt;&amp;quot;expirable-app&amp;quot;&lt;/code&gt;
in the DB. In that case &lt;code&gt;(Boolean) dbObject.get(&amp;quot;expirable-app&amp;quot;)&lt;/code&gt; would return &lt;code&gt;null&lt;/code&gt;. In the setter this is tried to convert to
&lt;code&gt;boolean&lt;/code&gt; which throws NPE due to above explained auto-boxing. So need to be careful when handling scenarios like this.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>